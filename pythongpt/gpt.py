import os
from typing import Optional, Any
from openai import OpenAI
from promptpy import Message, Model

api_key = os.getenv("OPENAI_API_KEY", None)
client = OpenAI(api_key=api_key)

class GPT(Model):
    """ChatGPT implementation of an LLM."""
    
    def configure(self, **config: Any) -> "GPT":
        """GPT constructor.
        
        Args:
            api_key: The api key that should be passed to OpenAi for API access.
            config: Configuration that is passed to OpenAI's chat completion creation method.
        """
        self.config = config
        return self

    def get_completion(self, messages: list[Message], stop: Optional[str] = None) -> Optional[str]:
        """Returns a completion generated by the LLM.
        Returns None if no valid completion was generated.

        Args:
            messages: The past conversation between "developer", "user", and "assistant".
            stop: A stop sequence for which the LLM should stop its completion.
                    
        Returns:
            completion: A completion for the "assistant" role, or None.
        """
        openai_messages = [{"role": message.role, "content": message.content} for message in messages]
        return client.chat.completions.create(
                messages=openai_messages,  # type:ignore
                stop=stop,
                **self.config
            ).choices[0].message.content#
    
gpt_4o_mini = GPT(use_cache=True, cache_path="__pythongpt__")\
    .configure(model="gpt-4o-mini", temperature=0)
    
gpt_4o = GPT(use_cache=True, cache_path="__pythongpt__")\
    .configure(model="gpt-4o", temperature=0)